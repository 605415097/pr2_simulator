#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

## Gazebo test cameras validation 

PKG = 'test_pr2_sensors_gazebo'
NAME = 'test_scan'

import math
import roslib
roslib.load_manifest(PKG)


import sys, unittest
import os, os.path, threading, time
import rospy, rostest
from sensor_msgs.msg import LaserScan

TEST_DURATION  = 15
ERROR_TOL      = 0.05
FAIL_COUNT_TOL = 10

TARGET_RANGES = [
10.0, 9.99983882904, 9.99534320831, 9.99964046478, 10.0, 10.0, 10.0, 
10.0, 10.0, 10.0, 10.0, 9.99662685394, 9.99687576294, 9.99985218048, 
10.0, 9.99897575378, 10.0, 10.0, 9.99973106384, 9.99622821808, 10.0, 
10.0, 9.99950695038, 9.99907493591, 10.0, 10.0, 10.0, 10.0, 
10.0, 9.99641895294, 9.99884128571, 9.99753379822, 10.0, 10.0, 9.99167823792, 
10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.99870681763, 
9.9998216629, 10.0, 10.0, 9.99117946625, 9.99870014191, 9.99036979675, 10.0, 
9.99431705475, 10.0, 9.98884677887, 9.9950466156, 9.99763870239, 10.0, 9.99877357483, 
9.99418640137, 9.99670600891, 10.0, 9.99446201324, 9.99196147919, 10.0, 10.0, 
10.0, 9.99166297913, 9.99192047119, 9.99185657501, 10.0, 10.0, 9.99994659424, 
9.99894046783, 10.0, 9.99583053589, 10.0, 10.0, 9.99773311615, 9.99945545197, 
10.0, 10.0, 9.99984073639, 10.0, 9.998960495, 10.0, 9.99376678467, 
10.0, 9.98296451569, 9.99907112122, 10.0, 9.99630832672, 9.99606609344, 10.0, 
10.0, 10.0, 10.0, 9.99400043488, 9.99860954285, 10.0, 10.0, 
9.99719619751, 9.99554634094, 10.0, 9.99563026428, 10.0, 9.99671936035, 9.99289131165, 
10.0, 10.0, 9.99812221527, 10.0, 10.0, 10.0, 10.0, 
10.0, 9.99724292755, 10.0, 10.0, 9.99911212921, 9.99652481079, 9.99563026428, 
9.99576187134, 10.0, 9.98870277405, 10.0, 9.99339103699, 9.99824714661, 9.99748706818, 
9.9998588562, 9.99503993988, 9.99257850647, 9.99934101105, 10.0, 9.99829387665, 9.99916362762, 
9.99107265472, 10.0, 10.0, 9.99593162537, 9.99824714661, 10.0, 9.99816322327, 
9.99867153168, 10.0, 9.99923419952, 10.0, 10.0, 9.99795627594, 10.0, 
9.99583435059, 9.99316978455, 9.99717617035, 10.0, 10.0, 9.99933719635, 10.0, 
10.0, 9.99871349335, 10.0, 10.0, 9.99743556976, 10.0, 9.99403095245, 
10.0, 10.0, 10.0, 10.0, 9.99921417236, 9.98162841797, 9.99485969543, 
9.99421787262, 9.99859905243, 9.99615383148, 9.99831771851, 9.99674510956, 9.99369621277, 9.99803066254, 
10.0, 10.0, 9.99507427216, 10.0, 9.99687480927, 10.0, 9.99890708923, 
10.0, 10.0, 10.0, 10.0, 9.99969768524, 10.0, 9.99992465973, 
10.0, 9.99894237518, 10.0, 10.0, 9.99674892426, 10.0, 9.99969005585, 
10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
10.0, 9.99698162079, 10.0, 9.99896526337, 9.99642372131, 9.99326992035, 9.99774551392, 
10.0, 9.99962997437, 10.0, 10.0, 10.0, 10.0, 9.99776935577, 
9.99998760223, 10.0, 9.99339294434, 10.0, 10.0, 9.99634647369, 10.0, 
10.0, 10.0, 9.99948215485, 9.9988822937, 10.0, 10.0, 9.99183559418, 
9.9980764389, 10.0, 9.99515628815, 10.0, 10.0, 9.99808692932, 9.99308586121, 
10.0, 9.99720859528, 2.03973531723, 2.03350901604, 2.02682733536, 2.00667667389, 2.00845313072, 
1.99915933609, 1.98035013676, 1.98055076599, 1.97116863728, 1.96413528919, 1.96429014206, 1.9414716959, 
1.93339371681, 1.93293356895, 1.92659533024, 1.90737712383, 1.90407562256, 1.9035217762, 1.92433667183, 
10.0, 10.0, 10.0, 10.0, 2.15980577469, 2.10453510284, 2.06631302834, 
2.02495574951, 1.99932467937, 1.97685456276, 1.95542430878, 1.9502376318, 1.93589448929, 1.91595995426, 
1.90938127041, 1.89359080791, 1.89449846745, 1.87489259243, 1.87934279442, 1.87429881096, 1.85932707787, 
1.85514354706, 1.84558057785, 1.85102009773, 1.83652317524, 1.82671260834, 1.82992362976, 1.83261835575, 
1.83026492596, 1.82654452324, 1.82712841034, 1.82965433598, 1.83095860481, 1.83245670795, 1.82871937752, 
1.83622646332, 1.83920502663, 1.84050941467, 1.84075665474, 1.8418135643, 1.84296071529, 1.85139536858, 
1.8610855341, 1.85947775841, 1.86986076832, 1.8837569952, 1.88947868347, 1.89985370636, 1.91149353981, 
1.91932356358, 1.94113528728, 1.94795191288, 1.97562539577, 1.99583089352, 2.01747941971, 2.0332467556, 
2.06767988205, 2.11457872391, 2.19976949692, 2.50255179405, 2.49871754646, 2.4934489727, 2.50908756256, 
2.49886536598, 2.51823711395, 2.51584362984, 2.51946496964, 2.53928732872, 2.55480694771, 2.57208943367, 
2.59086823463, 2.63436293602, 10.0, 9.99899101257, 9.9881029129, 9.99396133423, 10.0, 
10.0, 9.99711799622, 10.0, 10.0, 2.74573206902, 2.72085285187, 9.99602413177, 
9.99863529205, 10.0, 9.99882602692, 10.0, 10.0, 10.0, 10.0, 
9.99911308289, 9.99596118927, 9.99583816528, 10.0, 9.99210643768, 9.99990367889, 10.0, 
10.0, 1.80692923069, 1.7609565258, 1.73823523521, 1.7130420208, 1.68599951267, 1.68373250961, 
1.67773163319, 1.66043663025, 1.6473197937, 1.63810873032, 1.63010084629, 1.63714385033, 1.62044858932, 
1.61786067486, 1.61120510101, 1.6008207798, 1.60832035542, 1.61262333393, 1.60234868526, 1.60046672821, 
1.6028470993, 1.60414290428, 1.60306143761, 1.61050510406, 1.60806298256, 1.60053324699, 1.6132363081, 
1.61196267605, 1.61662566662, 1.62613832951, 1.62845993042, 1.63604211807, 1.64674496651, 1.65385437012, 
1.66626942158, 1.66892266273, 1.68185067177, 1.69592297077, 1.71095120907, 1.72977972031, 1.7525575161, 
1.7911093235, 1.83590686321, 9.99767780304, 9.99350357056, 9.99653530121, 9.98986339569, 10.0, 
9.99915599823, 9.99800109863, 9.9982881546, 9.99880504608, 10.0, 9.99987506866, 10.0, 
9.99852752686, 10.0, 10.0, 9.99538040161, 9.99619007111, 9.99700260162, 9.99693489075, 
10.0, 10.0, 9.99954891205, 9.9951467514, 9.99865150452, 9.99740695953, 10.0, 
9.99480724335, 9.99667739868, 9.9951505661, 9.9987859726, 9.99673271179, 10.0, 10.0, 
9.99779224396, 9.99776744843, 9.99876594543, 10.0, 10.0, 9.99944114685, 10.0, 
9.99802494049, 9.98961639404, 10.0, 10.0, 9.99945354462, 9.99756240845, 10.0, 
10.0, 9.99973011017, 10.0, 9.99924373627, 10.0, 10.0, 10.0, 
10.0, 10.0, 10.0, 9.99638843536, 9.99967193604, 10.0, 9.99976634979, 
9.99712657928, 10.0, 10.0, 10.0, 9.99580383301, 10.0, 10.0, 
10.0, 10.0, 9.99978733063, 9.99527168274, 10.0, 9.99952316284, 10.0, 
9.99262523651, 9.99278450012, 10.0, 9.99722576141, 9.99050712585, 10.0, 9.99519634247, 
10.0, 10.0, 9.99791908264, 9.99941253662, 9.99869823456, 10.0, 10.0, 
10.0, 9.99908065796, 9.99742698669, 9.99203872681, 9.9961643219, 10.0, 10.0, 
9.99121952057, 9.99554824829, 10.0, 10.0, 10.0, 9.9986038208, 9.99744033813, 
10.0, 9.99712753296, 10.0, 9.99875545502, 9.99621677399, 9.99581813812, 10.0, 
9.99501037598, 9.99984931946, 9.99732685089, 9.99538421631, 10.0, 10.0, 10.0, 
9.99695110321, 10.0, 9.99208545685, 10.0, 10.0, 10.0, 9.99250411987, 
9.99732017517, 9.99483108521, 10.0, 10.0, 10.0, 9.99915504456, 9.99790668488, 
10.0, 9.99995613098, 10.0, 9.99057197571, 9.99375724792, 10.0, 9.99774265289, 
10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.99662876129, 
10.0, 10.0, 10.0, 9.99694919586, 10.0, 10.0, 9.99687767029, 
9.99895858765, 10.0, 10.0, 10.0, 10.0, 9.99790477753, 9.99450016022, 
9.99283790588, 9.99066162109, 9.99612617493, 10.0, 9.99875545502, 9.99983501434, 9.99708366394, 
10.0, 10.0, 10.0, 10.0, 9.9964466095, 9.99504566193, 10.0, 
10.0, 9.99432468414, 10.0, 9.99337863922, 10.0, 10.0, 10.0, 
9.99242782593, 10.0, 9.99942398071, 10.0, 10.0, 10.0, 9.99909210205, 
9.99456977844, 9.99153804779, 9.99953174591, 9.9999294281, 9.99756240845, 9.99903011322, 10.0, 
9.99054050446, 9.99315166473, 10.0, 9.99567222595, 10.0, 10.0, 9.99507045746, 
9.99785614014, 10.0, 10.0, 10.0, 10.0, 10.0, 9.99667263031, 
10.0, 9.9967212677, 10.0, 9.99928092957, 10.0, 10.0, 9.99568271637, 
9.99736309052, 9.9972743988, 10.0, 9.99845695496, 9.99324607849, 10.0, 10.0, 
9.99239253998, 9.99770450592, 10.0, 9.99831295013, 10.0, 9.99559783936, 10.0, 
10.0, 9.99968910217, 9.99547386169, 9.99541473389, 10.0, 10.0, 9.99043750763, 
9.99705028534, 9.99817085266, 9.99459266663, ]




TARGET_INTENSITIES = [
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 249.998062134, 499.998352051, 500.000457764, 499.998382568, 500.007720947, 500.006011963, 
499.999176025, 500.009307861, 499.993774414, 499.994171143, 499.997161865, 499.999450684, 499.991088867, 
500.002410889, 500.002319336, 499.999511719, 499.998840332, 499.990081787, 499.992248535, 250.003067017, 
101.0, 101.0, 101.0, 1500.00598145, 2999.99902344, 2999.99731445, 2999.99853516, 
3000.00585938, 3000.00488281, 3000.0, 3000.00317383, 2999.99169922, 3000.00170898, 3000.00512695, 
2999.99291992, 2999.99584961, 2999.99902344, 2999.99584961, 3000.00341797, 3000.00219727, 2999.99731445, 
2999.99609375, 3000.00244141, 2999.99755859, 2999.9987793, 2999.99780273, 2999.99511719, 2999.9934082, 
2999.99291992, 3000.00073242, 2999.99780273, 2999.99951172, 3000.00073242, 3000.00708008, 3000.00268555, 
2999.99560547, 3000.00976562, 3000.0012207, 2999.99755859, 2999.99316406, 2999.99804688, 3000.0012207, 
3000.00146484, 3000.0012207, 3000.00878906, 2999.99853516, 3000.00366211, 3000.00708008, 2999.99755859, 
3000.00854492, 3000.0, 3000.00073242, 3000.00878906, 3000.00146484, 3000.01245117, 3000.0, 
2999.99267578, 2999.99633789, 2500.00610352, 2000.00793457, 2000.0, 1999.9987793, 2000.0045166, 
1999.99743652, 1999.99572754, 1999.9987793, 2000.00305176, 2000.0020752, 1999.99865723, 2000.00769043, 
1999.99499512, 999.998352051, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 1000.0112915, 1999.99816895, 999.997741699, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
499.997344971, 1000.00091553, 1000.00317383, 1000.00140381, 1000.00317383, 999.994018555, 999.996337891, 
999.996398926, 1000.00048828, 1000.0012207, 999.999816895, 1000.00213623, 1000.00793457, 1000.00488281, 
1000.00427246, 999.996643066, 999.99822998, 1000.00335693, 1000.00384521, 999.98815918, 999.995239258, 
999.99609375, 999.995178223, 999.993591309, 1000.00762939, 999.999328613, 999.990539551, 1000.00415039, 
999.993225098, 1000.00183105, 999.999572754, 1000.00280762, 1000.00054932, 1000.0010376, 1000.00128174, 
999.999816895, 999.989501953, 999.996032715, 999.999328613, 999.995849609, 1000.00787354, 999.992370605, 
999.997253418, 499.996429443, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, ]

class PointCloudTest(unittest.TestCase):
    def __init__(self, *args):
        super(PointCloudTest, self).__init__(*args)
        self.success = False


    def printPointCloud(self, cloud):
        print "["
        i = 0
        for pt in cloud.ranges:
            sys.stdout.write(str(pt) + ", ")
            i = i + 1
            if ((i % 7) == 0):
                print "" #newline
        print "]"

        print "["
        i = 0
        for pt in cloud.intensities:
            sys.stdout.write(str(pt) + ", ")
            i = i + 1
            if ((i % 7) == 0):
                print "" #newline
        print "]"


    def pointInput(self, cloud):
        i = 0
        range_fail_count = 0
        print "Input laser scan received"
        self.printPointCloud(cloud)  #uncomment to capture new data
        while (i < len(cloud.ranges) and i < len(TARGET_RANGES)):
            d = cloud.ranges[i] - TARGET_RANGES[i]
            if ((d < - ERROR_TOL) or (d > ERROR_TOL)):
                range_fail_count += 1
                print "range_fail_count:" + str(range_fail_count) + " failed. error:" + str(d) + " exceeded tolerance:" + str(ERROR_TOL)
            i = i + 1

        i = 0
        intensity_fail_count = 0
        while (i < len(cloud.intensities) and i < len(TARGET_INTENSITIES)):
            d = cloud.intensities[i] - TARGET_INTENSITIES[i]
            if cloud.intensities[i] > 0:
                d = d/cloud.intensities[i]
            if cloud.intensities[i] < 0:
                intensity_fail_count += 1
                print "intensity_fail_count:" + str(intensity_fail_count) + " failed. intensity <0:" + str(cloud.intensiteis[i])
            else:
                if ((d < - ERROR_TOL) or (d > ERROR_TOL)):
                    intensity_fail_count += 1
                    print "intensity_fail_count:" + str(intensity_fail_count) + " failed. error:" + str(d) + " exceeded tolerance:" + str(ERROR_TOL)
            i = i + 1

        if range_fail_count > FAIL_COUNT_TOL:
            print "Range fail count too large (" + str(range_fail_count) + "), failing scan"
            return

        if intensity_fail_count > FAIL_COUNT_TOL:
            print "Intensity fail count too large (" + str(intensity_fail_count) + "), failing scan"
            return

        self.success = True
    
    def test_scan(self):
        print "LNK\n"
        rospy.Subscriber("/base_scan", LaserScan, self.pointInput)
        rospy.init_node(NAME, anonymous=True)
        timeout_t = time.time() + TEST_DURATION
        while not rospy.is_shutdown() and not self.success and time.time() < timeout_t:
            time.sleep(0.1)
        self.assert_(self.success)
        
    


if __name__ == '__main__':
    rostest.run(PKG, sys.argv[0], PointCloudTest, sys.argv) #, text_mode=True)


