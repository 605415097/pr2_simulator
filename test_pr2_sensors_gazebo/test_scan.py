#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

## Gazebo test cameras validation 

PKG = 'test_pr2_sensors_gazebo'
NAME = 'test_scan'

import math
import roslib
roslib.load_manifest(PKG)


import sys, unittest
import os, os.path, threading, time
import rospy, rostest
from sensor_msgs.msg import LaserScan

TEST_DURATION  = 15
ERROR_TOL      = 0.05
FAIL_COUNT_TOL = 10

TARGET_RANGES = [
10.0, 10.0, 9.99660491943, 9.99349403381, 9.99942302704, 10.0, 10.0, 
9.99907684326, 10.0, 10.0, 9.99756526947, 10.0, 9.99677181244, 10.0, 
9.99968242645, 10.0, 9.99231338501, 9.99521923065, 10.0, 10.0, 9.99872112274, 
10.0, 10.0, 9.99064445496, 10.0, 10.0, 9.99724960327, 10.0, 
10.0, 10.0, 9.99998664856, 10.0, 9.99841785431, 10.0, 9.9983291626, 
10.0, 10.0, 10.0, 10.0, 9.99398422241, 9.99977874756, 9.99774169922, 
9.996925354, 10.0, 10.0, 9.99909496307, 9.99893951416, 10.0, 10.0, 
10.0, 9.9937543869, 10.0, 10.0, 9.9978685379, 9.98647975922, 10.0, 
9.99389648438, 9.99746322632, 10.0, 10.0, 10.0, 9.993683815, 10.0, 
9.99030017853, 9.99991226196, 9.99934482574, 9.99855709076, 10.0, 10.0, 10.0, 
9.99315166473, 10.0, 9.99504184723, 10.0, 10.0, 10.0, 9.99530696869, 
10.0, 9.99831104279, 10.0, 9.9990530014, 10.0, 9.99745845795, 10.0, 
9.99427509308, 9.99481678009, 9.9977388382, 9.99863815308, 10.0, 10.0, 9.99966526031, 
10.0, 9.99734306335, 10.0, 10.0, 10.0, 10.0, 9.9978761673, 
10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 9.99477291107, 
9.99050807953, 10.0, 9.99154853821, 9.99829006195, 10.0, 9.99709510803, 9.99182701111, 
9.99825191498, 10.0, 10.0, 9.99856948853, 9.99662208557, 10.0, 9.99459457397, 
9.99851417542, 9.99317455292, 10.0, 10.0, 9.99805450439, 10.0, 10.0, 
9.99871349335, 9.98950099945, 9.99764728546, 10.0, 10.0, 9.99963760376, 10.0, 
9.99790763855, 9.98966789246, 9.99874210358, 10.0, 10.0, 9.9935092926, 9.99344539642, 
9.9955663681, 9.9960641861, 9.99881744385, 9.99769687653, 10.0, 9.99578285217, 10.0, 
9.99407100677, 10.0, 9.99765586853, 9.99683189392, 9.9976940155, 9.99751377106, 10.0, 
9.99504566193, 9.99639701843, 9.99339675903, 10.0, 10.0, 9.99618530273, 10.0, 
9.99997901917, 9.99975776672, 10.0, 10.0, 10.0, 9.99509143829, 9.99857330322, 
9.99837207794, 10.0, 10.0, 9.99453544617, 10.0, 10.0, 9.99494075775, 
9.99712371826, 9.99265098572, 9.99738025665, 10.0, 10.0, 9.997174263, 9.99636459351, 
9.99897670746, 9.99450397491, 10.0, 10.0, 9.99432849884, 9.99940681458, 9.99342250824, 
10.0, 10.0, 9.99646091461, 9.99710559845, 9.99583625793, 10.0, 10.0, 
10.0, 9.98705196381, 9.99982357025, 10.0, 10.0, 9.99765014648, 9.99481296539, 
9.9981470108, 10.0, 9.99547481537, 10.0, 10.0, 9.99751472473, 9.99781894684, 
10.0, 2.04410338402, 2.04160475731, 2.03768706322, 2.02992963791, 2.0124194622, 2.01425218582, 
2.00267863274, 1.99855661392, 1.99251651764, 1.98677861691, 1.97754096985, 1.96990180016, 1.97107803822, 
1.95877122879, 1.95895111561, 1.95014619827, 1.94588375092, 1.93259680271, 1.93303644657, 1.9239140749, 
1.92329227924, 1.90972268581, 1.90805220604, 1.90460479259, 1.90177381039, 1.92458474636, 9.99672222137, 
9.99653434753, 10.0, 10.0, 2.18599653244, 2.11179852486, 2.07709646225, 2.04941964149, 
2.01587247849, 2.00834488869, 1.98786580563, 1.96522665024, 1.95827329159, 1.9485874176, 1.92606639862, 
1.9205391407, 1.91149818897, 1.89288806915, 1.89268195629, 1.88814926147, 1.88240635395, 1.87110626698, 
1.86629235744, 1.85659062862, 1.85287821293, 1.84365594387, 1.84608066082, 1.84299552441, 1.82290315628, 
1.82524073124, 1.82472014427, 1.81967282295, 1.82227170467, 1.8120765686, 1.81267702579, 1.81768357754, 
1.8058027029, 1.80892801285, 1.8155670166, 1.80278480053, 1.80039680004, 1.82397985458, 1.80337548256, 
1.80994880199, 1.80973649025, 1.80399382114, 1.81172311306, 1.80282866955, 1.80980503559, 1.81001663208, 
1.81232321262, 1.82217109203, 1.82310366631, 1.82436430454, 1.82145357132, 1.82947552204, 1.82484400272, 
1.83492815495, 1.84467983246, 1.84236121178, 1.84946262836, 1.84609472752, 1.86337590218, 1.87772262096, 
1.87427902222, 1.87360441685, 1.89567577839, 1.89988160133, 1.90400063992, 1.91616404057, 1.93212628365, 
1.93038034439, 1.94624018669, 1.96302556992, 1.98331320286, 2.00770521164, 2.02831029892, 2.04088449478, 
2.07075095177, 2.10046720505, 2.14827489853, 2.50146842003, 2.49948310852, 2.50862622261, 2.5016887188, 
2.50788259506, 2.51405119896, 2.51010918617, 2.51152443886, 2.52676963806, 2.52160096169, 2.54239845276, 
2.54977059364, 2.55745434761, 2.57458996773, 2.58268642426, 2.61582398415, 2.66286277771, 10.0, 
9.99120998383, 10.0, 10.0, 10.0, 10.0, 10.0, 9.99490451813, 
10.0, 10.0, 10.0, 9.99928951263, 2.72959160805, 2.73008966446, 2.71041417122, 
9.99841880798, 9.99265098572, 9.99980258942, 9.99057102203, 10.0, 10.0, 10.0, 
10.0, 9.99182224274, 10.0, 9.9940290451, 9.99592208862, 9.9947013855, 9.99715805054, 
9.99646949768, 10.0, 9.99701786041, 9.99502468109, 10.0, 10.0, 10.0, 
1.80364501476, 1.76711130142, 1.74818456173, 1.73867678642, 1.71467459202, 1.69922161102, 1.69169044495, 
1.67732870579, 1.66822612286, 1.65565621853, 1.64718878269, 1.64786744118, 1.64754080772, 1.63334071636, 
1.6321464777, 1.6426858902, 1.62945652008, 1.62303161621, 1.61028921604, 1.61539709568, 1.6091479063, 
1.6008964777, 1.59817814827, 1.6109726429, 1.6027930975, 1.59801542759, 1.59274947643, 1.60619592667, 
1.60550320148, 1.60770249367, 1.60442280769, 1.61061131954, 1.60828459263, 1.60782003403, 1.60973000526, 
1.61111235619, 1.60867655277, 1.60900068283, 1.61349356174, 1.61845695972, 1.62128794193, 1.62841689587, 
1.6290128231, 1.63386666775, 1.63554513454, 1.64275085926, 1.65719234943, 1.66587734222, 1.6773608923, 
1.68443369865, 1.69677114487, 1.70786798, 1.71682798862, 1.72970986366, 1.74220049381, 1.76798903942, 
1.79372894764, 1.84746849537, 9.99496841431, 10.0, 9.99614429474, 9.99502658844, 9.99879741669, 
10.0, 9.99421691895, 10.0, 9.99857139587, 9.99801826477, 10.0, 9.99782371521, 
9.99932861328, 9.99778079987, 9.99668884277, 10.0, 9.99849510193, 9.9960975647, 9.99737548828, 
9.99806499481, 9.99912261963, 9.98603057861, 10.0, 10.0, 10.0, 9.99876117706, 
9.9959821701, 10.0, 10.0, 9.99089717865, 10.0, 9.99602413177, 10.0, 
10.0, 10.0, 10.0, 9.99665927887, 10.0, 9.9922170639, 10.0, 
10.0, 10.0, 9.99931049347, 10.0, 10.0, 9.99388027191, 9.99914741516, 
10.0, 10.0, 9.9991645813, 10.0, 9.99641513824, 9.99607658386, 10.0, 
9.99630832672, 10.0, 10.0, 10.0, 9.99185562134, 10.0, 10.0, 
9.99841594696, 10.0, 10.0, 9.99967384338, 10.0, 10.0, 10.0, 
9.98861026764, 9.99863433838, 9.99577140808, 10.0, 10.0, 10.0, 10.0, 
10.0, 9.99873447418, 10.0, 10.0, 10.0, 10.0, 10.0, 
9.99615573883, 9.99571323395, 9.9993686676, 9.99109363556, 10.0, 10.0, 9.99287891388, 
10.0, 9.99528694153, 9.99903297424, 10.0, 9.99527740479, 9.99943637848, 10.0, 
10.0, 9.99551200867, 9.98952102661, 10.0, 10.0, 10.0, 10.0, 
10.0, 10.0, 10.0, 9.99554824829, 10.0, 10.0, 10.0, 
9.9920759201, 10.0, 9.99734687805, 10.0, 10.0, 10.0, 10.0, 
9.99974536896, 10.0, 10.0, 9.99802398682, 9.99466705322, 9.99513530731, 9.99352741241, 
10.0, 9.99531173706, 10.0, 9.99831295013, 10.0, 9.99920082092, 10.0, 
9.99276924133, 10.0, 9.99789905548, 9.99512195587, 10.0, 10.0, 10.0, 
9.98902130127, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
10.0, 10.0, 9.99812221527, 10.0, 9.99643135071, 10.0, 10.0, 
9.99815273285, 10.0, 10.0, 9.99661445618, 10.0, 10.0, 10.0, 
9.99813842773, 10.0, 9.99440002441, 10.0, 10.0, 10.0, 10.0, 
10.0, 10.0, 10.0, 10.0, 9.98922252655, 9.99652004242, 9.99608898163, 
10.0, 10.0, 10.0, 9.99906539917, 10.0, 10.0, 10.0, 
10.0, 10.0, 10.0, 10.0, 10.0, 9.99654197693, 9.99549198151, 
9.99917221069, 9.99215316772, 9.99764156342, 9.99526119232, 10.0, 10.0, 9.99642848969, 
10.0, 10.0, 10.0, 9.99745559692, 10.0, 9.99895572662, 9.99894237518, 
10.0, 10.0, 10.0, 9.99833774567, 10.0, 9.99959468842, 10.0, 
9.9903459549, 9.99357318878, 10.0, ]



TARGET_INTENSITIES = [
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
250.005233765, 499.999725342, 499.994934082, 500.003723145, 500.004547119, 499.997650146, 499.999420166, 
500.001098633, 500.003326416, 499.995239258, 500.001312256, 499.999755859, 499.998168945, 500.000396729, 
500.001281738, 499.998840332, 500.007751465, 499.995300293, 499.996154785, 499.988372803, 499.992523193, 
499.992736816, 499.998352051, 499.998474121, 500.002929688, 500.006652832, 249.997360229, 101.0, 
101.0, 101.0, 1500.00769043, 3000.00341797, 3000.00488281, 2999.99755859, 3000.00073242, 
3000.00195312, 2999.99584961, 2999.99243164, 3000.00341797, 3000.00097656, 2999.99487305, 2999.99609375, 
2999.99658203, 3000.00415039, 3000.00463867, 3000.00439453, 3000.00073242, 3000.0012207, 3000.00048828, 
3000.00537109, 3000.00512695, 3000.00732422, 3000.00268555, 2999.99804688, 2999.99438477, 3000.00439453, 
2999.99169922, 2999.99389648, 2999.99804688, 3000.00390625, 3000.00927734, 2999.99487305, 2999.99829102, 
3000.00341797, 2999.99487305, 2999.99975586, 3000.00927734, 3000.00073242, 2999.99633789, 3000.00073242, 
3000.0065918, 2999.99194336, 3000.00048828, 2999.99951172, 3000.0, 3000.00512695, 2999.99755859, 
3000.00585938, 2999.9987793, 3000.0012207, 2999.9987793, 3000.00268555, 3000.00195312, 2999.99951172, 
2999.99438477, 3000.0012207, 2999.99316406, 3000.00219727, 3000.00415039, 3000.00952148, 2999.99682617, 
3000.0012207, 2999.99731445, 2999.99804688, 3000.00341797, 3000.00463867, 2999.99633789, 3000.00439453, 
2999.9934082, 3000.00219727, 3000.00073242, 3000.00830078, 3000.00317383, 3000.0078125, 2999.99755859, 
2999.99267578, 2999.99975586, 2499.99780273, 1999.99536133, 2000.00817871, 1999.98986816, 1999.99230957, 
2000.00244141, 2000.0, 2000.00585938, 2000.00036621, 2000.00976562, 1999.98596191, 1999.99816895, 
2000.00073242, 2000.00085449, 1999.99890137, 2000.00427246, 2000.00280762, 999.99786377, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 999.993713379, 2000.00158691, 2000.00390625, 1000.01000977, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 500.010101318, 
1000.00054932, 999.99395752, 999.999511719, 1000.00354004, 1000.00439453, 1000.00787354, 1000.00799561, 
1000.00018311, 1000.00750732, 1000.00177002, 999.99597168, 999.994628906, 999.997375488, 1000.00701904, 
1000.0012207, 1000.00201416, 999.994750977, 999.997802734, 1000.00311279, 1000.00183105, 999.99230957, 
1000.00445557, 1000.0065918, 1000.00457764, 999.999328613, 999.996276855, 1000.0043335, 1000.00091553, 
1000.00622559, 999.987365723, 1000.00195312, 1000.00378418, 999.99597168, 1000.00811768, 999.99822998, 
999.990478516, 999.997375488, 1000.00091553, 1000.0065918, 1000.00775146, 999.99597168, 999.999389648, 
999.994567871, 999.990478516, 999.998413086, 1000.00219727, 999.998962402, 1000.00097656, 1000.00311279, 
999.994018555, 1000.00177002, 999.999145508, 999.999267578, 1000.00463867, 999.995910645, 1000.00805664, 
1000.00250244, 500.000701904, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 
101.0, 101.0, 101.0, ]

class PointCloudTest(unittest.TestCase):
    def __init__(self, *args):
        super(PointCloudTest, self).__init__(*args)
        self.success = False


    def printPointCloud(self, cloud):
        print "["
        i = 0
        for pt in cloud.ranges:
            sys.stdout.write(str(pt) + ", ")
            i = i + 1
            if ((i % 7) == 0):
                print "" #newline
        print "]"

        print "["
        i = 0
        for pt in cloud.intensities:
            sys.stdout.write(str(pt) + ", ")
            i = i + 1
            if ((i % 7) == 0):
                print "" #newline
        print "]"


    def pointInput(self, cloud):
        i = 0
        range_fail_count = 0
        print "Input laser scan received"
        self.printPointCloud(cloud)  #uncomment to capture new data
        while (i < len(cloud.ranges) and i < len(TARGET_RANGES)):
            d = cloud.ranges[i] - TARGET_RANGES[i]
            if ((d < - ERROR_TOL) or (d > ERROR_TOL)):
                range_fail_count += 1
                print "range_fail_count:" + str(range_fail_count) + " failed. error:" + str(d) + " exceeded tolerance:" + str(ERROR_TOL)
            i = i + 1

        i = 0
        intensity_fail_count = 0
        while (i < len(cloud.intensities) and i < len(TARGET_INTENSITIES)):
            d = cloud.intensities[i] - TARGET_INTENSITIES[i]
            if cloud.intensities[i] > 0:
                d = d/cloud.intensities[i]
            if cloud.intensities[i] < 0:
                intensity_fail_count += 1
                print "intensity_fail_count:" + str(intensity_fail_count) + " failed. intensity <0:" + str(cloud.intensiteis[i])
            else:
                if ((d < - ERROR_TOL) or (d > ERROR_TOL)):
                    intensity_fail_count += 1
                    print "intensity_fail_count:" + str(intensity_fail_count) + " failed. error:" + str(d) + " exceeded tolerance:" + str(ERROR_TOL)
            i = i + 1

        if range_fail_count > FAIL_COUNT_TOL:
            print "Range fail count too large (" + str(range_fail_count) + "), failing scan"
            return

        if intensity_fail_count > FAIL_COUNT_TOL:
            print "Intensity fail count too large (" + str(intensity_fail_count) + "), failing scan"
            return

        self.success = True
    
    def test_scan(self):
        print "LNK\n"
        rospy.Subscriber("/base_scan", LaserScan, self.pointInput)
        rospy.init_node(NAME, anonymous=True)
        timeout_t = time.time() + TEST_DURATION
        while not rospy.is_shutdown() and not self.success and time.time() < timeout_t:
            time.sleep(0.1)
        self.assert_(self.success)
        
    


if __name__ == '__main__':
    rostest.run(PKG, sys.argv[0], PointCloudTest, sys.argv) #, text_mode=True)


